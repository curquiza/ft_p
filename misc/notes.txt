INCLUDES :
========
/usr/include/netinet/in.h

COMMANDES :
=========

Une commande c'est
- un code
- des arguments

Code = au plus 4 caractères alphabétiques, sans tenir compte de la casse.

La casse ne s'applique pas non plus au code valeur des arguments.
(Je ne sais pas encore ce qu'est un code valeur d'argument. L'exemple pris est 'a' ou 'A' pour le type ascii)

Une commande (C-->S) ou une réponse (C<--S) se termine par un CRLF = \r\n = char 13 + char 10



DIFFERENCE ENTRE MON SERVER ET RFC
==================================

PORT et PASV :
    - peuvent renvoyer une réponse "425 Can't open data connection."

LIST :
    - on peut renvoyer une réponse "550 File unavailable" (= no such file) quand on sort du scope du server
    - quand on fait "ls .." on renvoie une 550
    - pas ouf : on peut faire "ls ../ftp_server/." et ca marche
    - pas ouf : on peut faire "ls /src/signal.c" et on voit tout le path

CWD:
    - la RFC se contredit entre la section "Commande FTP" (4.1) et l'Appendice II : l'un indique que CWD doit renvoyer une 250 alors que l'appendix une 200.
    - Pareil, l'appendice demande, en cas d'erreur de retourner une "431 Not a directory". Numéro d'erreur qui n'exite pas dans la section 4.2 qui liste les differents type d'erreurs
    => parti pris : je renvoie une 200, comme dans l'appendix, et je retourne une 550 en cas d'erreur pour etre cohérente avec mes autres commandes.
    - pas ouf : si je cd un folder avec des pb de permissions, je retourne : 550 No a directory.


DIVERS
======
- Le server clot toujours le DT channel après avoir envoyé des données.
  Un nouveau DT channel est donc réouvert à chaque fois que des données sont passées.
- LIST : La commande n'essaie pas d'ouvrir le canal DT.
  Soit il est ouvert et on passe les données, soit il l'est pas et on renvoie une "426 Connection closed; transfer aborted."
  Le client ftp de MacOs fait pareil : il envoie toujours la commande PASV ou PORT avant d'envoyer LIST.
